(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./app/assets/js/main.js":[function(require,module,exports){
(function (global){
'use strict';

var _ = window._;

global.App = {

    resizer: require('./_resize'),
    ajax: require('./_ajax'),
    debug: require('./_debug'),

    FormControls: require('./_form-controls'),
    typeAheads: require('./_typeaheads'),

    searchbuild: require('./_search'),
    search: {},

    functions: {

        getPage: function($el, iframe) {

            console.log('running globl.App.functions.getPage', $el, iframe);

            var args = {
                type:           $el.attr('data-type'),
                id:             $el.attr('data-id') || $el.parents('form:first').find('input#id').val(),
                action:         $el.attr('data-action'),
                parentID:       $el.attr('data-parent-id'),
                parentType:     $el.attr('data-parent-type'),
                parentTitle:    $el.attr('data-parent-title'),
                input:          $el.parents('.input-group:first').length ? $el.parents('.input-group:first').find('input:first').val() : false
            };

            console.log('attributes', args);

            global.App.ajax.get(

                $.extend(true, args, {

                    success: function(data) {

                        if (iframe) {

                            $('iframe').contents().find('div.content:last').slideUp().after(data);

                        } else {

                            $('div.content:last').slideUp().after(data);

                            var e = jQuery.Event( "ajaxContentAdded", { data: data } );
                            console.log('firing: ajaxContentAdded');
                            $(window).trigger(e);
                            console.log('fired: ajaxContentAdded');
                        }

                    }
                })
            );
        }
    }
};

// ???
//require('./_alerts');


(function($) {

    $(document).ready(function() {

        //global.App.debug.init();

        // create / edit buttons
        $('body').on('click', '.iframe', function(e) {

            console.log('clicked .iframe');
            e.preventDefault();
            var $el = $(this);

            $el.colorbox({
                html: '<div class="content"></div>',
                width:"90%",
                height:"90%",
                fastIframe: false,
                trapFocus: false,

                onComplete: function(a,b,c) {
                    global.App.functions.getPage($el);
                },

                onCleanup: function() {

                    for (var i = global.App.ajax.pages.length - 1; i >= 0; i--) {
                        global.App.ajax.pages[i].close();
                    }

                }
            });

        });

        // delete modals
        $('body').on('click', '.modal-popup', function(e) {

            console.log('clicked .modal-popup');

            e.stopPropagation();
            e.preventDefault();

            var href   = $(this).attr('href') || $(this).attr('data-action');
            var $modal = $('#ajax-modal');

            console.log('clicked .modal-popup');

            $modal.load(href, '', function(){

                $modal.modal();
                $modal.css(
                {
                    'max-width': '50%',
                    'left': function () {
                        return ($(window).width()/2) - ($modal.width()/2);
                    },
                    'top': function() {
                        return ($(window).height()/2) - 90;
                    }
                });

                $modal.find('form').on('submit', function(e) {

                    e.preventDefault();
                    var $form = $(this);

                    $.ajax({
                        method: $form.attr('method'),
                        url: $form.attr('action'),
                        data: $form.serialize(),

                        success:function(data) {

                            console.log("Am I running 2 ?");
                            if (data.success && data.reload === true) {

                                if (global.App.ajax.pages.length) {
                                    global.App.ajax.pages[global.App.ajax.pages.length - 1].refresh();
                                } else if (window.oTable) {
                                    // Reload parent Otable
                                    window.oTable.dataTable().api().ajax.reload(null, false);
                                } else {
                                    location.reload();
                                }

                                $modal.find('button.btn-default').click();

                            } else if (data.error) {
                                alert(data.error);
                            }
                        }
                    });
                });
            });
        });
    });

    // $(window).on('ngModalOpen', function() {

    //     console.log('>>> Open');
    //     $('.modal-dialog').css({
    //         'max-width': '40%',
    //         'top': function() {
    //             var top_offset = ($(window).height()/2) - 210;
    //             console.log(top_offset);
    //             return top_offset;
    //         }
    //     });
    // });

    // dropzone for ajax pages
    $(window).on('ajaxContentAdded', function() {

        if(!$('#venues_image_upload').length)
        {
            console.log('could not find images element');
            return false;
        }

        var form_action = $('#venues_image_upload').attr('action');
        var Dropzone = new window.Dropzone('#venues_image_upload', {
            url: form_action,
            accept: function (file, done) {

                if ((file.type).toLowerCase() !== "image/jpg" &&
                    (file.type).toLowerCase() !== "image/gif" &&
                    (file.type).toLowerCase() !== "image/jpeg" &&
                    (file.type).toLowerCase() !== "image/png")
                {
                   done("Invalid file");
                }
                else {
                    done();
                }
            },
            init: function() {

                this.on("addedfile", function(file) {
                    //console.log("Added file.");
                    global.App.ajax.pages[global.App.ajax.pages.length - 1].refresh();
                });
            }
        });

        // colorbox for displaying images
        $('a.mthumbs').volorbox({
            rel:'mthumb',
            title: function(){
                var caption = $(this).attr('data-caption');
                return caption;
            },
            maxWidth: "90%",
            maxHeight: "90%"
        });
    });

    $(document).ready(function() {

        if (!$('#search-container').length) {
            return false;
        }

        console.log(':|');

        global.App.search.companies = $.extend(true, {}, global.App.searchbuild);
        global.App.search.companies.init({name : 'companies'});

        global.App.search.venues = $.extend(true, {}, global.App.searchbuild);
        global.App.search.venues.init({name : 'venues'});

        global.App.search.contacts = $.extend(true, {}, global.App.searchbuild);
        global.App.search.contacts.init({name : 'contacts'});

        var $typeAheads = $('body').find('input.typeahead.form-control').next('.bootstrap-tagsinput').find('input:first');
        $.each($typeAheads, function() {

            var $input = $(this);
            var $parent = $input.closest('.form-group').find('input.typeahead');

            $input.attr('data-prefetch-url', $parent.attr('data-prefetch-url'));
            $input.attr('data-template-id', $parent.attr('data-template-id'));
            $input.attr('data-role', $parent.attr('data-role'));
            $input.addClass('typeahead');
            $parent.removeClass('typeahead');

            global.App.typeAheads.init($input.parent());
        });
    });

    // resize all the things on resize
    $(window).resize(function() {

        var $modal = $('#ajax-modal');
        $modal.css(
        {
            'max-width': '50%',
            'left': function () {
                return ($(window).width()/2) - ($modal.width()/2);
            },
            'top': function() {
                return ($(window).height()/2) - 90;
            }
        });

        console.log('Valid resize ???', ($(window).height()/2) - 210);
        $('.modal-content').css({
            top: function() {
                return ($(window).height()/2) - 210;
            }
        });

        global.App.resizer.resizeColorBoxes();
    });
    //global.App.resizer.resizeColorBoxes();

})(jQuery);



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_ajax":"/var/www/sites/aldadata/app/assets/js/_ajax.js","./_debug":"/var/www/sites/aldadata/app/assets/js/_debug.js","./_form-controls":"/var/www/sites/aldadata/app/assets/js/_form-controls.js","./_resize":"/var/www/sites/aldadata/app/assets/js/_resize.js","./_search":"/var/www/sites/aldadata/app/assets/js/_search.js","./_typeaheads":"/var/www/sites/aldadata/app/assets/js/_typeaheads.js"}],"/var/www/sites/aldadata/app/assets/js/_ajax.js":[function(require,module,exports){
(function (global){
'use strict';

$.fn.serializeObject = function()
{
    var o = {};
    var a = this.serializeArray();

    $.each(a, function() {

        if (o[this.name] !== undefined) {

            if (!o[this.name].push) {
                o[this.name] = [o[this.name]];
            }
            o[this.name].push(this.value || '');

        } else {
            o[this.name] = this.value || '';
        }
    });

    return o;
};

var AjaxPage = function(ajax, options) {

    $.extend(true, this, options);

    this.ajax  = ajax;
    this.child = undefined;

    this.typeaheads = require('./_typeaheads');
    this.formcontrols = require('./_form-controls');
    this.init();

    return this;
};

AjaxPage.prototype = {

    init: function() {

        var self = this;

        self.$form = self.$el.find('form');

        self.setTitle();
        self.hookEvents();
        self.toggleAddOtherModels();
        self.toggleCloseButtons();

        // init self controls
        self.formcontrols.initFormControls(self.$el);
        self.typeaheads.init(self.$el);

         console.log('AjaxPage init', self);
    },

    hookEvents: function() {

        var self = this;

        // Find form and disable default action (otherwise whole iframe is reloaded)
        self.$form.one('submit', function(e) {
            e.stopPropagation();
            e.preventDefault();
            self.submit();
        });

        // close
        self.$el.find('button.close-ajax-page').one('click', function(e) {

            //console.log('closing page');
            e.preventDefault();
            var $button = $(this);

            $.each(self.ajax.pages, function(index, page) {

                if (page.$el.find('button.close-ajax-page')[0] === $button[0]) {
                    if (index === self.ajax.pages.length - 1) {
                        // dit is de laatste pagina
                        page.close();
                    } else {
                        console.log('page length', self.ajax.pages.length);
                        alert('Sluit eerst de onderliggende pagina\'s');
                    }
                }
            });
        });
    },

    setTitle: function() {

        var self = this;
        var $title = self.$el.find('.page-header h3');
        $title.html($title.html() + ' <small>(to ' + self.parentTitle + ')</small>');
    },

    toggleAddOtherModels: function() {

        var self = this;
        if (self.modelID === 0) { // this is a new model, we are not in editing mode
            self.$el.find('.related-models-container').remove();
        }
    },

    toggleCloseButtons: function() {

        var self = this;
        var $closeButtons = $('body').add(self.$el).find('button.close_popup, button.close-ajax-page');

        $closeButtons.attr('disabled', 'disabled');
        $closeButtons.filter(':last').removeAttr('disabled');
    },

    close: function() {

        var self = this;

        console.log('AjaxPage Close');

        // find if current page is the top page
        // if not find the previous page to slideDown
        var $previousPage = false;
        var isTopPage     = false;

        if (self.ajax.pages.length > 1) {
            $previousPage = self.ajax.pages[self.ajax.pages.length - 2].$el.find('.content');
        } else {
            $previousPage = $('.content:first');
            isTopPage     = true;
        }

        // it's not the top page
        if (!isTopPage) {

            self.ajax.pages[self.ajax.pages.length - 2].refresh();
            self.$el.slideUp(function() {

                $(this).remove();
                self.$el.empty();
            });

            $previousPage.slideDown();

        // it is so we reload the datatable
        } else {

            if (typeof window.oTable !== 'undefined') {
                window.oTable.dataTable().api().ajax.reload(null, false);
            }

            // Close colorbox
            //self.ajax.pages.pop();
            $.colorbox.close();
        }

        // pop last page
        self.ajax.pages.pop();

        // self-destroy
        self = undefined;
    },

    submit: function() {

        var self = this;

        $('.backdrop').css('display', 'block');

        var post_data = {},
        tmp_form_data      = self.$form.serializeObject();
        var num_ajax_pages = self.ajax.pages.length;

        if(num_ajax_pages > 0 && self.ajax.pages[num_ajax_pages - 1].hasOwnProperty('parentID'))
        {
            $.extend(true, post_data, {
                    parent_model: self.ajax.pages[num_ajax_pages - 1].parentType,
                    parent_id: self.ajax.pages[num_ajax_pages - 1].parentID,
                    child_model: self.ajax.pages[num_ajax_pages - 1].modelType,
                    child_id: self.ajax.pages[num_ajax_pages - 1].modelID
            });
        }

        $.extend(true, post_data, tmp_form_data);
        console.log('AjaxPage Submit', post_data, tmp_form_data);

        self.ajax.post({
            data:       post_data,
            page:       self,

            success: function(html) {

                console.log('pages', global.App.ajax.pages, html);

                self.$el.empty();
                self.url     = $(html).attr('data-url');
                self.modelID = $(html).attr('data-id');
                self.$el.html($(html).contents());
                self.init();

                window.oTable.api().ajax.reload(null, false);

                console.log("Am I running ?");
                $('.backdrop').css('display', 'none');
            }
        });
    },

    refresh: function() {

        var self = this;

        console.log('AjaxPage Refresh');

        $.ajax({
            method: 'GET',
            url: self.url,
            success: function(html) {

                self.$el.empty();
                self.$el.html($(html).contents());
                self.init();

                var e = jQuery.Event( "ajaxContentAdded", { data: html } );
                $(window).trigger(e);
            }
        });
    }
};

var Ajax = function(options) {

    var defaults = {
        method: 'GET',
        data: {
        }
    };

    this.defaults         = $.extend(true, {}, defaults, options);
    this.pages            = [];
    this.currentPageIndex = undefined;
};

Ajax.prototype = {

    post: function(options) {

        var url = options.page.url;
        console.log('Ajax post', url, options);

        $.ajax({
            url: url,
            method: 'POST',
            data: options.data,

            success:function(data, textStatus, jqXHR) {

                if (options.success && typeof options.success === 'function') {
                    options.success(data);
                    console.log('Ajax post response', data);
                }
            }
        });
    },

    get: function(options) {

        var self = this;
        $.extend(true, options, self.defaults, options);
        var url = '/';

        if(options.type === 'tickettypes') {

            console.log('ticketype', options);
            switch (options.action) {
                case 'edit':
                    url += options.parentType.toLowerCase() + '/' + options.parentID + '/' + options.type + '/' + options.id + '/' + options.action;
                    break;
                case 'create':
                    url += options.parentType.toLowerCase() + '/' + options.parentID + '/' + options.type + '/' + options.action;
                    break;
            }

        } else {

            switch (options.action) {
                case 'edit':
                    url += options.type + '/' + options.id + '/' + options.action;
                    break;
                case 'create':
                    url += options.type + '/' + options.action;
                    break;
            }
        }

        if (options.parentID) {
            options.data.parentID = options.parentID;
        }

        console.log('Ajax get', url);

        $.ajax({
            url: url,
            method: options.method,
            data: options.data,

            success:function(data, textStatus, jqXHR) {

                var page = new AjaxPage(self, {
                    $el:            $(data),
                    url:            url,
                    modelID:        options.id || 0,
                    modelType:      options.type,
                    parentID:       options.parentID,
                    parentType:     options.parentType,
                    parentTitle:    options.parentTitle
                });

                console.log('Ajax got page :)', page);

                // set parent id on form
                var $parentField = page.$el.find('form input[name=' + [page.parentType] + '_id]');
                if ($parentField.length && !$parentField.val()) {
                    $parentField.val(page.parentID);
                }

                // inline summary buttons
                page.$el.on('click', '.ajax', function(e) {

                    e.preventDefault();
                    e.stopPropagation();

                    console.log('clicked .ajax');
                    global.App.functions.getPage($(this));
                });

                // These guys still have to go in a treelike structure (or not)
                self.pages.push(page);
                if (options.success && typeof options.success === 'function') {
                    options.success(page.$el);
                }
            }
        });
    }
};

module.exports = new Ajax();



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./_form-controls":"/var/www/sites/aldadata/app/assets/js/_form-controls.js","./_typeaheads":"/var/www/sites/aldadata/app/assets/js/_typeaheads.js"}],"/var/www/sites/aldadata/app/assets/js/_debug.js":[function(require,module,exports){
(function (global){
'use strict';

var Debugger = function() {
	var self = this;
};

Debugger.prototype = {

	init: function() {

		var self = this;
		self.createPanel();
		var $button = $('<button type="button">').text('Click me');

		$button.on('click', function() {
			console.log(global.App.ajax.pages);
		});

		$button.appendTo(self.$panel);
	},

	createPanel: function() {

		var self = this;

		var $panel = $('<div class="panel panel-default"><div class="panel-heading"><h3 class="panel-title">Debug</h3></div><div class="panel-body"></div></div>');
		var $panelContainer = $('<div>').css({
			position: 'absolute',
			width: 300,
			height: 400,
			bottom: 10,
			right: 10,
			"z-index": 9999
		});

		$panel.appendTo($panelContainer.appendTo($('body')));
		self.$panel = $panel.find('.panel-body');

		console.log('created panel ???');
	},

	showParentAjaxPageIDsInHeaders: function(ajaxPage) {

		var self = this;
		if (!global.App.ajax.pages.length) {
			return false;
		}

		$.each(global.App.ajax.pages, function() {
			var $html = this.$el;
			var debugString = 'id: ';
			debugString += ajaxPage.id || '';
			debugString += ', modelType: ';
			debugString += ajaxPage.modelType || '';
			debugString += ', parentID: ';
			debugString += ajaxPage.parentID || '';
			debugString += ', parentType: ';
			debugString += ajaxPage.parentType || '';
			debugString += ', parentTitle: ';
			debugString += ajaxPage.parentTitle || '';
			var $title = $html.find('.page-header h3');
			$title.html($title.html() + ' <small>' + debugString + '</small>');
			console.log('debugString', debugString);

		});
	}
};

module.exports = new Debugger();
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/var/www/sites/aldadata/app/assets/js/_entity-details.js":[function(require,module,exports){
'use strict';

var EntityDetails = function() {

    this.models = {
        'company':      'companies',
        'venue':        'venues',
        'contact':      'contacts'
    };

};

EntityDetails.prototype = {

    get: function(args) {

        var self = this;

        if (!args) {
            throw 'No arguments given';
        }
        if (!args.type) {
            throw 'Entity type not set';
        }
        if (!args.id) {
            throw 'Entity ID not set';
        }

        var url = '/' + args.type + '/' + args.id + '/details';

        $.ajax({
            url: url,
            method: 'GET',
            type: 'html',
            success: function(data, status) {
                $('#search_' + args.type).find('.details').html(data);
            }
        });
    }
};

module.exports = new EntityDetails();

},{}],"/var/www/sites/aldadata/app/assets/js/_form-controls.js":[function(require,module,exports){
'use strict';

var FormControls = function() {

};

FormControls.prototype = {

    initFormControls: function($el) {

        var self = this;

        if (!$el) {
            $el = $('body');
        }

        $.datepicker.setDefaults({
            //showOn: "both",
            buttonImageOnly: true,
            formatDate: "yy-mm-dd"
            //buttonImage: "calendar.gif",
            //buttonText: "Calendar"

        });

        self.initDataSliders($el);
        self.initInputGroups($el);
        self.initDatePickers($el);
        self.initTimePickers($el);
        self.initKeyboardShortcuts($el);
    },

    initKeyboardShortcuts: function($el) {

        // On cursor down and up key, go to next or previous legend
        $el.find('.col-sm-7 input[type="text"]').on('keyup', function(e) {

            var $legends           = $el.find('.col-sm-7 legend'); // all legends in left column
            var $currentLegend     = $(this).parents('.form-group:first').prevAll().filter('legend:first');
            var currentLegendIndex = $legends.filter($currentLegend).index('legend');
            var legendCount        = $legends.length;

            if (e.keyCode === 40) { // DOWN key
                if (currentLegendIndex < legendCount - 1) {
                    $legends.eq(currentLegendIndex + 1).nextAll('.form-group:first').find('.form-control:first').focus();
                }
            }

            if (e.keyCode === 38) { // UP key
                if (currentLegendIndex > 0) {
                    $legends.eq(currentLegendIndex - 1).nextAll('.form-group:first').find('.form-control:first').focus();
                }
            }
        });
    },

    initTimePickers: function($el) {

        $el.find('input[time-picker]').each(function(ndx, val) {

            var $input = $(this);
            $input.timepicker({
                controlType: 'select',
                timeFormat: 'HH:mm',
                stepMinute: 5
            });
        });
    },

    initDatePickers: function($el) {

        $el.find('input[date-picker]').each(function(ndx, val) {

            var $input = $(this);
            var options = {dateFormat: 'yy-mm-dd'};

            $input.datepicker(options);
        });

    },

    initInputGroups: function($el) {

        $el.find('[input-group]').each(function() {

            var $input = $(this);
            var $inputGroup = $('<div>').addClass('input-group');
            var $addon = $('<span>').addClass('input-group-addon').html($input.attr('input-group-label'));

            $input.wrap($inputGroup);
            $input.after($addon);
        });
    },

    initDataSliders: function($el) {

        $el.find('input[data-slider=true]').each(function() {

            var $input = $(this);
            var $slider = $('<div>');
            $input.after($slider);

            var min = parseInt($input.attr('data-slider-min'), 10) || 0;
            var max = parseInt($input.attr('data-slider-max'), 10) || 100;
            var step = parseInt($input.attr('data-slider-step')) || 1;
            var forceStepOnInput = $input.attr('data-slider-force-input-step') ? true : false;
            var value = parseInt($input.val()) || min;

            $slider.slider({
                value: value,
                min: min,
                max: max,
                step: step,
                slide: function( event, ui ) {
                    $input.val(ui.value);
                }
            });

            var calculateCorrectValue = function(value, forceStep) {

                if (value > max) {
                    value = max;
                }
                if (value < min) {
                    value = min;
                }

                if (forceStep) {
                    if (value > 0) {
                        value = Math.ceil(value / step) * step;
                    }
                    if (value < 0) {
                        value = Math.floor(value / step) * step;
                    }
                }

                return value;
            };

            var setValues = function() {
                var value = $input.val();
                $input.val(calculateCorrectValue(value, forceStepOnInput));
                $slider.slider({
                    value: calculateCorrectValue(value, true)
                });
            };

            setValues();

            $input.on('change', function() {
                setValues();
            });
        });
    }

};

module.exports = new FormControls();

},{}],"/var/www/sites/aldadata/app/assets/js/_resize.js":[function(require,module,exports){
'use strict';

var Resizer = function() {
};

Resizer.prototype = {

    resizeColorBoxes: function() {
        if ($('#colorbox').length) {
            $.colorbox.resize({width:"90%", height:"90%"});
        }
    }
};

module.exports = new Resizer();

},{}],"/var/www/sites/aldadata/app/assets/js/_search.js":[function(require,module,exports){
'use strict';

var SearchModule = function() {

    this.name       = '';
    this.$table     = {};
    this.res        = {};
    this.dt         = {};
    this.dt_columns = [];

    this.typeaheads = undefined;
};

SearchModule.prototype = {

    init: function(options) {

        var self = this;

        self.name       = options.name;
        self.$table     = $('#search_'+options.name+'_table');
        self.res        = {};
        self.dt         = {};
        self.dt_columns = [];

        self.initData()
            .initColumns()
            .initTable()
            .initDetails()
            .initClickListener()
            .initKBListener();
    },

    initColumns: function() {

        var self = this;

        $('#search_'+self.name+'_table th').each(function(ndx) {
            self.dt_columns.push({data: $(this).attr('data-column')});
        });

        console.log('self.dt_columns', self.dt_columns);

        return self;
    },
    initData: function() {

        var self = this;

        self.res.data = JSON.parse($('#dt_'+self.name+'_init').text()).data;
        console.log('self.res.data', '#dt_'+self.name+'_init', self.res.data, $('#dt_'+self.name+'_init').text());

        return self;
    },
    initTable: function() {

        var self = this;

        console.log(self.name);
        self.dt = $('#search_'+self.name+'_table').dataTable({
            "dom": "<'row'<'col-md-6'<'row'<'col-xs-6'l><'col-xs-6 text-right'r>>><'col-md-6'f>>t<'row'<'col-md-6'i><'col-md-6'p>>",
            "pageLength": 5,
            "order": [[ 0, "desc" ]],
            "columns": self.dt_columns,
            "data": JSON.parse($('#dt_'+self.name+'_init').text()).data,
            "lengthChange": false,
            "searching": false,
            "tableTools": {
                "sRowSelect": "single",
                "aButtons": [
                ]
            }
        });

        return self;
    },
    initDetails: function() {

        var self = this;

        var $el = $('#search_' + self.name + '_table tbody tr:first');
        if($el.length) {

            var entity_id = $('#search_' + self.name + '_table tbody tr:first').attr('id');
            var entity_details = require('./_entity-details');
            entity_details.get({
                type: self.name,
                id: entity_id
            });
        }




        return self;
    },
    initClickListener: function() {

        var self = this,

        selector = '#search_' + self.name + '_table tbody tr';

        $('body').on('click', selector, function() {

            var $row = $(this);

            var entity_details = require('./_entity-details');
            entity_details.get({
                type: self.name,
                id: $row.attr('id')
            });
            $(selector).not($row).removeClass('selected');
            $row.toggleClass('selected');
        });

        return self;
    },
    initKBListener: function () {

        var self = this;
        var name = self.name;

        // typeaheads input
        $('body').on('focusout', '.tt-input', function(event) {

            $(this).hide();
            $(this).parent('span').find('.tt-hint').hide();
            event.stopPropagation();
        });

        // tags input
        $('body').on('click', '.bootstrap-tagsinput', function(event) {

            var $sel_input = $(this).find('.tt-input');
            var $sel_hint = $(this).find('.tt-hint');

            $sel_input.val('').show().focus();
            $sel_hint.show();

            event.stopPropagation();
        });

        // Main KB event pump
        $('body').on('keyup', '#search_' + name + ' input', function() {

            var req_data = {};
            $('#search_' + name + '_table thead tr th').each(function(ndx){

                var curr_property = $(this).attr('data-column');
                req_data[curr_property] = $('#'+self.name+'_'+curr_property).val();
                console.log(curr_property, req_data[curr_property]);
            });

            // extend request params
            switch(name) {
                case 'companies':
                    req_data = $.extend('true', req_data,
                        {
                            references: $('#companies_references').val()
                        });

                    break;
                case 'venues':
                    req_data = $.extend('true', req_data,
                        {
                            min_capacity: $('#venues_min_capacity').val(),
                            max_capacity: $('#venues_max_capacity').val(),
                            min_rig_capacity: $('#venues_min_rig_capacity').val()
                        });

                    break;
                default:
                    break;
            }

            // post query
            $.ajax({
                type: "POST",
                url: "/search_"+self.name+"_data",
                async: true,
                dataType: 'json',
                data: req_data,
                success: function(data, textStatus, jqXHR) {

                    self.dt.fnClearTable();
                    if (data.data && data.data.length) {
                        console.log('ajax search data', data.data);
                        self.dt.fnAddData(data.data);
                    }

                    if($('#search_' + name + '_table tbody tr:selected').length === 0)
                    {
                        $('.details').empty();
                    }
                },

                error: function(qXHR, textStatus, errorThrown) {
                    console.log(qXHR, textStatus, errorThrown);
                }
            });
        });

        return self;
    }
};

module.exports = new SearchModule();


},{"./_entity-details":"/var/www/sites/aldadata/app/assets/js/_entity-details.js"}],"/var/www/sites/aldadata/app/assets/js/_typeaheads.js":[function(require,module,exports){
(function (global){
'use strict';

var TypeAheads = function() {

};

TypeAheads.prototype = {

    init: function($el) {

        var _ = window._;
        var Bloodhound = window.Bloodhound;

        if (!$el) {
            $el = $('body');
        }

        $el.find('input.typeahead').not('.initialized').each(function() {

            var $input              = $(this);
            var $addNewButton       = $input.parents('.input-group:first').find('.input-group-btn button');
            var murl                = '/api/v1' + $input.attr('data-prefetch-url');
            var attachBaseUrl       = $input.attr('data-attach-url');
            var $suggestionTemplate = $el.find('#' + $input.attr('data-template-id')).html() || '<%= datum.value %>';
            var suggestionTemplate  = _.template($suggestionTemplate);

            console.log('suggestion template', $suggestionTemplate);

            // This is used for the search pages, combining the type-ahead features with the tag input stuff. Instead of
            // attaching this model to the parent model via attachBaseUrl
            var tagInput = ($input.attr('data-role') === 'tagsinput' ? true : false);
            console.log('is tagInput: ', $input.attr('data-role'), tagInput);

            // Disable addNewButton, it will be enabled at on change event, when there are at least 3 characters
            if ($addNewButton) {
                $addNewButton.attr('disabled', 'disabled');
            }

            // Prevent inputs from initializing multiple times
            $input.addClass('initialized');

            // Construct Bloodhound suggestion engine, we don't use the prefetch featured
            var bloodhound = new Bloodhound(
            {
                datumTokenizer: function(d) {
                    return Bloodhound.tokenizers.whitespace(d.value);
                },
                queryTokenizer: function(query) {
                    return Bloodhound.tokenizers.whitespace(query);
                },
                dupDetector: function(remoteMatch, localMatch) {
                    return remoteMatch.id === localMatch.id;
                },

                limit: 10,
                remote: {
                    url: murl + '?q=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            //bloodhound.clearPrefetchCache(); bloodhound.clearRemoteCache();
            bloodhound.initialize();
            //bloodhound.clearPrefetchCache(); bloodhound.clearRemoteCache();

            //console.log('ta Bloodhound', bloodhound.ttAdapter());

            // Construct the Twitter Typeahead itself
            $input.typeahead(
            {
                hint: true,
                highlight: true,

            },
            {
                limit: 10,
                source: bloodhound.ttAdapter(),
                restrictInputToDatum: true,
                templates: {
                    header: function(datum) {
                        return '<div class="list-group typeahead-results-container">';
                    },
                    footer: function(datum) {
                        return '</div>';
                    },
                    suggestion: function(datum) {
                        var $link = $('<a href="#" class="list-group-item" data-id="' + datum.id + '">' + suggestionTemplate({datum : datum}) + '</a>');

                        // Add typeahead to begin of DOM to be able to do styling
                        // (cannot inspect elements, because the focus out clears the elements)
                        if (0) {
                            $link.on('click', function(e) {
                                e.preventDefault();
                                e.stopPropagation();
                                $(this).parent().parent().parent().parent().parent().clone().prependTo('body');
                                return true;
                            });
                        }

                        console.log('$link', $link, datum);

                        return $link;
                    }
                }
            })

            // When using the keyboard to walk through the suggestions, add bootstrap classes for visual enhancements
            .on('typeahead:cursorchanged', function(event, suggestion, dataset) {

                console.log('typeahead:cursorchanged', $(this), event, suggestion, dataset);

                if(suggestion) {
                    $(this).val(suggestion.value);
                }

                $('.tt-suggestion a').removeClass('active');
                $('.tt-suggestion.tt-cursor a').addClass('active');

            })

            // When an item is selected from the list
            .on('typeahead:selected', function(event, suggestion, dataset) {

                // attach this item to the parent item
                if (attachBaseUrl) {

                    var attachUrl = attachBaseUrl + '/' + suggestion.id + '/attach';

                    $.ajax({
                        url: attachUrl,
                        method: 'POST',

                        success: function(data) {

                            if (data.success) {
                                // reset input fields
                                $('.typeahead').typeahead('val', '');
                                console.log('typeahead:selected related model attached :)', data);

                            } else if (data.error) {
                                alert(data.error);
                            }

                            if (data.reload && global.App.ajax.pages.length) {
                                global.App.ajax.pages[global.App.ajax.pages.length - 1].refresh();
                            }

                        }
                    });

                }

                // search countries
                else if (tagInput) {

                    console.log(suggestion);

                    var $sel = $(this).closest('.form-group').find('input.form-control:first');
                    $('.typeahead').typeahead('val', '');
                    $sel.tagsinput('add', suggestion.value);

                    return false;
                }

            })

            // Enable addNewButton if at least 3 characters are present in the input box
            .on('keyup', function() {

                if ($addNewButton) {

                    if ($(this).val().length > 2) {
                        $addNewButton.removeAttr('disabled');
                    } else {
                        $addNewButton.attr('disabled', 'disabled');
                    }

                }
            });

            // Add classes for styling purposes
            var $target_el = $input.parent('.twitter-typeahead').addClass('row-fluid block').find('.tt-menu');
            $target_el.css({display: 'block'});

            console.log('tagsinput $target_el', $target_el.length, $target_el);
        });
    }
};

module.exports = new TypeAheads();

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},["./app/assets/js/main.js"])
//# sourceMappingURL=data:application/json;base64,
